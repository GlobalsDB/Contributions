7/13/12 Version (older versions may contradict newer versions)

My Methods:

	Initializing (with randomGraph()) a graph with 500,000 vertices and ~6 edges/vertex takes 7-8 minutes, 
	but most of that time is taken up with the edges.

	When initializing a graph:
		
		addVertexDatum():

			running addVertexDatum 500,000 times takes ~5 seconds

			running addVertexDatum 1,000,000 times takes ~10 seconds.

			running addVertexDatum 10,000,000 times takes ~110 seconds. I think that this is indicative of an inefficiency that grows as the size increases.
			further data will let me test this hypothesis.

			running addVertexDatum 20,000,000 times takes ~225 seconds. I appears my suspicions have not been confirmed. One trend I noticed was that at
			seemingly arbitrary points, the program paused for a few seconds. This might be caused by the globals database expanding itself to hold more data.

		addEdgeDatum() on a graph with 100,000 edges and cheating:

			running addEdgeDatum 200,000 times takes ~3 seconds

			running addEdgeDatum 1,000,000 times takes ~20 seconds

			running addEdgeDatum 2,000,000 times takes ~40 seconds

		addEdgeDatum() on a graph with 100,000 edges and without cheating:

			running addEdgeDatum 500,000 times takes ~17 seconds

			running addEdgeDatum 1,000,000 times takes ~33 seconds

			running addEdgeDatum 2,000,000 times takes ~70 seconds




	For a graph with 500,000 vertices and ~6 edges/vertex:

		to run listConnected1() 100,000 times took ~6 seconds

		to run the old listConnected2() 10 times took ~65 seconds (no longer in the program)

		to run the new listConnected2() 500,000 times took ~35 seconds
		this is a vast improvement, since at the previous rate this would have taken a month

		to run getDatum() 100,000 times took ~1.5 seconds

		to run getDatum() 500,000 times took ~4.5 seconds

		to run addEdgeDatum() safely 600,000 times took ~18 seconds
		to run addEdgeDatum() unsafely 600,000 times took ~8 seconds




	For a graph with 100,000 vertices and ~6 edges/vertex:

		to run listConnected1() 100,000 times took ~5 seconds

		to run deleteVertex() 100,000 times took ~2 seconds

		to run getDatum() 100,000 times took ~1.5 seconds




Conclusions:
	
	With the modifications I have made, the program is now only truly limited by the time it takes to initialize the graph. All methods in the graph class 
	are able to be run tens of thousands of times per second, so once a graph is initialized, any data accessing should happen nearly instantaneously.	

	In order to improve efficiencies this much, addEdgeDatum() has been modified since the previous version. This had the unfortunate result of approximately halving
	its performance. Each vertex now has an easily-accessible list of the other vertices which have an edge to this one, allowing listConnected2() (and other methods
	which are based on listConnected2()) to run efficiently. In order to keep this list up-to-date, addEdgeDatum() now has to call "set" twice instead of once,
	so it takes approximately twice as long to run. Because of this, I have introduced a new parameter to addEdgeDatum. This is the "cheating" parameter,
	and by setting it to true, you can circumvent some of the assertions. This improves efficiency by a factor of 1.5-2  (see above for data), but without
	the assertions you can do things like make an edge from or to vertices that do not exist. Because of this, I am leaving the option to cheat in,
	but making it default to "off".

	With this change, randomGraph() now rather slow. It takes 7-8 minutes to initialize a graph with a mere 500,000 vertices, and almost all of that time is
	spent initializing the ~3,000,000 edges. Interestingly, I noted that it took a majority of the time (5 minutes) to initialize the final ~500,000 edges. 
	In another test, 500,000 vertices and ~2,500,000 edges were initialized in only 3.5 minutes! This makes me think that there is something going on in globals
	which has problems storing information past a certain point. However, I am not sure how to confirm this hunch, nor do I know what to do about it if it is confirmed.




Measurements for Other Methods:
	Running randomString() 10,000,000 times takes ~3 seconds

	Running Math.random() 100,000,000 times takes ~1.5 seconds

	calling a function takes a trivial amount of time (100,000,000 in about a second)

	evaluating an "if" takes a trivial amount of time (1,000,000,000 in about a second)

	assigning a numeric value takes a trivial amount of time (1,000,000,000 in about a second)

	printing something takes a decent amount of time (1,000,000 in about a minute), but i dont use it much

	calling set() on a global 1,000,000 times takes ~7 sec
	calling set() on a global 10,000,000 times takes ~60 sec

	calling data() on a global 10,000,000 takes ~40 sec



